info: Microsoft.EntityFrameworkCore.Migrations[20411]
      Acquiring an exclusive lock for migration application. See https://aka.ms/efcore-docs-migrations-lock for more information if this takes too long.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (143ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*) FROM "sqlite_master" WHERE "name" = '__EFMigrationsLock' AND "type" = 'table';
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      INSERT OR IGNORE INTO "__EFMigrationsLock"("Id", "Timestamp") VALUES(1, '2025-09-18 16:34:43.561199+00:00');
      SELECT changes();
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
          "MigrationId" TEXT NOT NULL CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY,
          "ProductVersion" TEXT NOT NULL
      );
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*) FROM "sqlite_master" WHERE "name" = '__EFMigrationsHistory' AND "type" = 'table';
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT "MigrationId", "ProductVersion"
      FROM "__EFMigrationsHistory"
      ORDER BY "MigrationId";
info: Microsoft.EntityFrameworkCore.Migrations[20405]
      No migrations were applied. The database is already up to date.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      DELETE FROM "__EFMigrationsLock";
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE TABLE IF NOT EXISTS "AuditLogs" (
              "Id" TEXT NOT NULL CONSTRAINT "PK_AuditLogs" PRIMARY KEY,
              "Timestamp" TEXT NOT NULL,
              "UserId" TEXT NULL,
              "EntityName" TEXT NOT NULL,
              "EntityId" TEXT NOT NULL,
              "Action" TEXT NOT NULL,
              "PayloadHash" TEXT NOT NULL,
              "PayloadJson" TEXT NULL
          );
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE VIEW IF NOT EXISTS emissions_s1s2 AS
              SELECT act.ReportingPeriodId AS period_id,
                     SUM(CASE WHEN se.Scope=1 THEN cr.Co2eKg ELSE 0 END) AS scope1_kg,
                     SUM(CASE WHEN se.Scope=2 THEN cr.Co2eKg ELSE 0 END) AS scope2_kg,
                     SUM(CASE WHEN se.Scope=3 THEN cr.Co2eKg ELSE 0 END) AS scope3_kg
              FROM CalculationResults cr
              JOIN ScopeEntries se ON se.Id = cr.ScopeEntryId
              JOIN Activities act ON act.Id = se.ActivityId
              GROUP BY act.ReportingPeriodId;
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE VIEW IF NOT EXISTS emissions_intensity AS
              SELECT e.period_id,
                     (e.scope1_kg + e.scope2_kg + e.scope3_kg) AS total_kg,
                     f.Revenue AS revenue,
                     CASE WHEN IFNULL(f.Revenue,0)=0 THEN NULL ELSE (e.scope1_kg + e.scope2_kg + e.scope3_kg)/f.Revenue END AS intensity_kg_per_revenue
              FROM emissions_s1s2 e LEFT JOIN Financials f ON f.ReportingPeriodId = e.period_id;
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE VIEW IF NOT EXISTS water_consumption AS
              SELECT wm.ReportingPeriodId AS period_id,
                     SUM(IFNULL(wm.IntakeM3,0) - IFNULL(wm.DischargeM3,0)) AS consumption_m3
              FROM WaterMeters wm GROUP BY wm.ReportingPeriodId;
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE VIEW IF NOT EXISTS accident_frequency AS
              SELECT si.ReportingPeriodId AS period_id,
                     SUM(CAST(si.IncidentsCount AS REAL)) AS incidents_count,
                     SUM(IFNULL(si.HoursWorked,0)) AS hours_worked,
                     CASE WHEN SUM(IFNULL(si.HoursWorked,0))=0 THEN NULL ELSE (SUM(CAST(si.IncidentsCount AS REAL))/SUM(IFNULL(si.HoursWorked,0)))*200000 END AS afr
              FROM SafetyIncidents si GROUP BY si.ReportingPeriodId;
fail: Microsoft.EntityFrameworkCore.Database.Command[20102]
      Failed executing DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE INDEX IF NOT EXISTS IX_Activities_ReportingPeriodId ON Activities(ReportingPeriodId);
Unhandled exception. Microsoft.Data.Sqlite.SqliteException (0x80004005): SQLite Error 1: 'no such table: main.Activities'.
   at Microsoft.Data.Sqlite.SqliteException.ThrowExceptionForRC(Int32 rc, sqlite3 db)
   at Microsoft.Data.Sqlite.SqliteCommand.PrepareAndEnumerateStatements()+MoveNext()
   at Microsoft.Data.Sqlite.SqliteCommand.GetStatements()+MoveNext()
   at Microsoft.Data.Sqlite.SqliteDataReader.NextResult()
   at Microsoft.Data.Sqlite.SqliteCommand.ExecuteReader(CommandBehavior behavior)
   at Microsoft.Data.Sqlite.SqliteCommand.ExecuteReader()
   at Microsoft.Data.Sqlite.SqliteCommand.ExecuteNonQuery()
   at System.Data.Common.DbCommand.ExecuteNonQueryAsync(CancellationToken cancellationToken)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteNonQueryAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteNonQueryAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteNonQueryAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlRawAsync(DatabaseFacade databaseFacade, String sql, IEnumerable`1 parameters, CancellationToken cancellationToken)
   at Program.<Main>$(String[] args) in /Users/christiankristensen/Desktop/ESG-as-a-service/src/EsgAsAService.Api/Program.cs:line 232
   at Program.<Main>(String[] args)

using System.Text;
using System.Xml;
using System.Globalization;
using System.Linq;
using EsgAsAService.Application.Abstractions;
using EsgAsAService.Domain.Entities;
using EsgAsAService.Application.Models;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;

namespace EsgAsAService.Infrastructure.Reporting;

    public class ReportGenerator : IReportGenerator
    {
        private readonly ICalculationService _calc;
        private readonly IAITextGenerator _ai;

        public ReportGenerator(ICalculationService calc, IAITextGenerator ai)
        {
            _calc = calc ?? throw new ArgumentNullException(nameof(calc));
            _ai = ai ?? throw new ArgumentNullException(nameof(ai));
        }

    public async Task<byte[]> GeneratePdfAsync(Company company, ReportingPeriod period, CancellationToken ct = default)
    {
        var summary = await _calc.SummarizeAsync(period, ct);

        string NotProvided(string note = "") => string.IsNullOrWhiteSpace(note) ? "Not provided" : $"Not provided – {note}";
        IContainer CellHeader(IContainer c) => c.DefaultTextStyle(x => x.SemiBold()).BorderBottom(1).PaddingBottom(2);

        var doc = Document.Create(container =>
        {
            // Cover
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().AlignCenter().Text($"ESG Report").SemiBold().FontSize(28);
                page.Content().Column(col =>
                {
                    col.Spacing(8);
                    col.Item().Text($"Company: {company.Name}").FontSize(16);
                    col.Item().Text($"Year: {period.Year}");
                    col.Item().Text($"Period: {new DateTime(period.StartDate, TimeOnly.MinValue):yyyy-MM-dd} – {new DateTime(period.EndDate, TimeOnly.MinValue):yyyy-MM-dd}");
                    if (!string.IsNullOrWhiteSpace(company.Industry)) col.Item().Text($"Industry: {company.Industry}");
                    if (!string.IsNullOrWhiteSpace(company.CountryCode)) col.Item().Text($"Country: {company.CountryCode}");
                    if (!string.IsNullOrWhiteSpace(company.OrganizationNumber)) col.Item().Text($"Organization No: {company.OrganizationNumber}");
                });
                page.Footer().AlignCenter().Text(x => x.Span("Generated by ESG-as-a-Service").FontColor(Colors.Grey.Medium));
            });

            // TOC (static list of sections for now)
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("Table of Contents").SemiBold().FontSize(20);
                page.Content().Column(col =>
                {
                    col.Spacing(4);
                    var sections = new[]
                    {
                        ("B1", "Company & Basis"),
                        ("B2", "Policies"),
                        ("B3", "Energy & Emissions"),
                        ("B4", "Pollution"),
                        ("B5", "Biodiversity"),
                        ("B6", "Water"),
                        ("B7", "Resources & Waste"),
                        ("B8", "Workforce"),
                        ("B9", "Health & Safety"),
                        ("B10", "Pay & Training"),
                        ("B11", "Business Conduct"),
                        ("C1", "Strategy & Targets"),
                        ("C2", "Risks"),
                        ("C3", "Human Rights"),
                        ("C4", "Governance"),
                        ("C5", "Board Diversity"),
                        ("C6", "Stakeholders"),
                        ("C7", "Value Chain"),
                        ("C8", "Assurance"),
                        ("C9", "Methodology")
                    };
                    foreach (var (code, title) in sections)
                        col.Item().Text($"{code} – {title}");
                });
                page.Footer().AlignCenter().Text(t =>
                {
                    t.Span("Page ");
                    t.CurrentPageNumber();
                    t.Span(" of ");
                    t.TotalPages();
                });
            });

            // B1 – Company & Basis
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B1 – Company & Basis").SemiBold().FontSize(20);
                page.Content().Column(col =>
                {
                    col.Spacing(6);
                    col.Item().Text($"Legal Name: {company.Name}");
                    col.Item().Text($"Industry: {company.Industry ?? "-"}");
                    col.Item().Text($"Country: {company.CountryCode ?? "-"}");
                    col.Item().Text($"Organization No: {company.OrganizationNumber ?? "-"}");
                    col.Item().Text($"Period: {new DateTime(period.StartDate, TimeOnly.MinValue):yyyy-MM-dd} – {new DateTime(period.EndDate, TimeOnly.MinValue):yyyy-MM-dd}");
                });
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B2 – Policies (basic governance booleans)
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B2 – Policies").SemiBold().FontSize(20);
                page.Content().Column(col =>
                {
                    var g = period.GovernancePractices;
                    col.Spacing(6);
                    if (g is null)
                    {
                        col.Item().Text(NotProvided("governance practices"));
                        return;
                    }
                    col.Item().Text($"Anti‑corruption policy: {(g.AntiCorruptionPolicy ? "Yes" : "No")}");
                    col.Item().Text($"Data privacy policy: {(g.DataPrivacyPolicy ? "Yes" : "No")}");
                    col.Item().Text($"Whistleblower policy: {(g.WhistleblowerPolicy ? "Yes" : "No")}");
                    col.Item().Text($"% Female Board: {g.PercentFemaleBoard:N1}%");
                    if (!string.IsNullOrWhiteSpace(g.Notes)) col.Item().Text($"Notes: {g.Notes}");
                });
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B3 – Energy & Emissions
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B3 – Energy & Emissions").SemiBold().FontSize(20);
                page.Content().Column(col =>
                {
                    col.Spacing(6);
                    // Scope totals
                    col.Item().Table(t =>
                    {
                        t.ColumnsDefinition(c => { c.RelativeColumn(2); c.RelativeColumn(1); c.RelativeColumn(1); });
                        t.Header(h =>
                        {
                            h.Cell().Element(CellHeader).Text("Scope");
                            h.Cell().Element(CellHeader).AlignRight().Text("kg CO2e");
                            h.Cell().Element(CellHeader).AlignRight().Text("Share");
                        });
                        var total = Math.Max(0.0001, summary.TotalKg);
                        var rows = new[]
                        {
                            new { Name = "Scope 1", Kg = summary.Scope1Kg },
                            new { Name = "Scope 2", Kg = summary.Scope2Kg },
                            new { Name = "Scope 3", Kg = summary.Scope3Kg },
                            new { Name = "Total",  Kg = summary.TotalKg }
                        };
                        foreach (var r in rows)
                        {
                            var nameCell = t.Cell();
                            if (r.Name == "Total") nameCell.Text(r.Name).SemiBold();
                            else nameCell.Text(r.Name);
                            t.Cell().AlignRight().Text(r.Kg.ToString("N0"));
                            var share = r.Name == "Total" ? 1.0 : (r.Kg / total);
                            t.Cell().AlignRight().Text((share).ToString("P1", CultureInfo.InvariantCulture));
                        }
                    });

                    // Breakdown by activity category (period V1 data)
                    var byCarrier = period.EnvironmentalActivities
                        .GroupBy(a => a.Category)
                        .Select(g => new { Carrier = string.IsNullOrWhiteSpace(g.Key) ? "(unspecified)" : g.Key, Kg = g.Sum(x => x.CO2eKg) })
                        .OrderByDescending(x => x.Kg)
                        .ToList();
                    if (byCarrier.Count > 0)
                    {
                        col.Item().PaddingTop(10).Text("Breakdown by category").Bold();
                        col.Item().Table(t =>
                        {
                            t.ColumnsDefinition(c => { c.RelativeColumn(3); c.RelativeColumn(1); });
                            t.Header(h =>
                            {
                                h.Cell().Element(CellHeader).Text("Category");
                                h.Cell().Element(CellHeader).AlignRight().Text("kg CO2e");
                            });
                            foreach (var row in byCarrier)
                            {
                                t.Cell().Text(row.Carrier);
                                t.Cell().AlignRight().Text(row.Kg.ToString("N0"));
                            }
                        });
                    }
                });
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B4 – Pollution
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B4 – Pollution").SemiBold().FontSize(20);
                page.Content().Text(NotProvided("pollution register"));
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B5 – Biodiversity
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B5 – Biodiversity").SemiBold().FontSize(20);
                page.Content().Text(NotProvided("sensitive areas / locations"));
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B6 – Water
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B6 – Water").SemiBold().FontSize(20);
                page.Content().Text(NotProvided("water meters"));
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B7 – Resources & Waste
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B7 – Resources & Waste").SemiBold().FontSize(20);
                page.Content().Text(NotProvided("waste manifests / materials"));
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B8 – Workforce (basic SocialIndicators fallback)
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B8 – Workforce").SemiBold().FontSize(20);
                page.Content().Column(col =>
                {
                    var s = period.SocialIndicators;
                    col.Spacing(6);
                    if (s is null)
                    {
                        col.Item().Text(NotProvided("headcount"));
                        return;
                    }
                    col.Item().Text($"Employees: {s.EmployeeCount:N0}");
                    col.Item().Text($"% Female: {s.PercentFemaleEmployees:N1}%");
                    col.Item().Text($"Hours worked: {s.TotalHoursWorked:N0}");
                });
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B9 – Health & Safety
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B9 – Health & Safety").SemiBold().FontSize(20);
                page.Content().Column(col =>
                {
                    var s = period.SocialIndicators;
                    col.Spacing(6);
                    if (s is null)
                    {
                        col.Item().Text(NotProvided("incidents/hours"));
                        return;
                    }
                    col.Item().Text($"Lost time injuries: {s.LostTimeInjuries:N0}");
                    col.Item().Text($"Hours worked: {s.TotalHoursWorked:N0}");
                    double? afr = s.TotalHoursWorked > 0 ? (double)((s.LostTimeInjuries / s.TotalHoursWorked) * 200_000) : null;
                    col.Item().Text($"AFR (LTIs per 200k hours): {(afr is null ? "-" : afr.Value.ToString("N2"))}");
                });
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B10 – Pay & Training
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B10 – Pay & Training").SemiBold().FontSize(20);
                page.Content().Column(col =>
                {
                    var s = period.SocialIndicators;
                    col.Spacing(6);
                    if (s is null)
                    {
                        col.Item().Text(NotProvided("training/payroll"));
                        return;
                    }
                    col.Item().Text($"Training hours: {s.TrainingHours:N0}");
                    col.Item().Text("Gender pay gap: Not provided");
                });
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B11 – Business Conduct
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B11 – Business Conduct").SemiBold().FontSize(20);
                page.Content().Column(col =>
                {
                    var g = period.GovernancePractices;
                    col.Spacing(6);
                    if (g is null)
                    {
                        col.Item().Text(NotProvided("governance cases"));
                        return;
                    }
                    col.Item().Text($"Anti‑corruption policy: {(g.AntiCorruptionPolicy ? "Yes" : "No")}");
                    col.Item().Text($"Data privacy policy: {(g.DataPrivacyPolicy ? "Yes" : "No")}");
                    col.Item().Text($"Whistleblower policy: {(g.WhistleblowerPolicy ? "Yes" : "No")}");
                });
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // C1–C9 placeholders
            container.Page(p =>
            {
                p.Margin(40);
                p.Header().Text("C1 – Strategy & Targets").SemiBold().FontSize(20);
                p.Content().Text(NotProvided("targets & progress"));
                p.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });
            container.Page(p =>
            {
                p.Margin(40);
                p.Header().Text("C2 – Risks").SemiBold().FontSize(20);
                p.Content().Text(NotProvided("risk assessment"));
                p.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });
            container.Page(p =>
            {
                p.Margin(40);
                p.Header().Text("C3 – Human Rights").SemiBold().FontSize(20);
                p.Content().Text(NotProvided("policy & due diligence"));
                p.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });
            container.Page(p =>
            {
                p.Margin(40);
                p.Header().Text("C4 – Governance").SemiBold().FontSize(20);
                p.Content().Text(NotProvided("roles & oversight"));
                p.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });
            container.Page(p =>
            {
                p.Margin(40);
                p.Header().Text("C5 – Board Diversity").SemiBold().FontSize(20);
                p.Content().Text(NotProvided("composition"));
                p.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });
            container.Page(p =>
            {
                p.Margin(40);
                p.Header().Text("C6 – Stakeholders").SemiBold().FontSize(20);
                p.Content().Text(NotProvided("engagement"));
                p.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });
            container.Page(p =>
            {
                p.Margin(40);
                p.Header().Text("C7 – Value Chain").SemiBold().FontSize(20);
                p.Content().Text(NotProvided("scope 3 coverage"));
                p.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });
            container.Page(p =>
            {
                p.Margin(40);
                p.Header().Text("C8 – Assurance").SemiBold().FontSize(20);
                p.Content().Text(NotProvided("external/internal"));
                p.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });
            container.Page(p =>
            {
                p.Margin(40);
                p.Header().Text("C9 – Methodology").SemiBold().FontSize(20);
                p.Content().Text(NotProvided("boundaries, EF sources"));
                p.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });
        });

        return doc.GeneratePdf();
    }
    
    public async Task<byte[]> GeneratePdfAsync(FullEsgReport report, CancellationToken ct = default)
    {
        // Minimal rendering based on FullEsgReport: cover + B3, B6, B7 filled
        string NotProvided(string note = "") => string.IsNullOrWhiteSpace(note) ? "Not provided" : $"Not provided – {note}";
        IContainer CellHeader(IContainer c) => c.DefaultTextStyle(x => x.SemiBold()).BorderBottom(1).PaddingBottom(2);

        void AppendMetrics(IContainer container, string sectionCode)
        {
            if (report.SectionMetrics is null) return;
            if (!report.SectionMetrics.TryGetValue(sectionCode, out var set) || set.Metrics.Count == 0) return;

            container.PaddingTop(10).Column(col =>
            {
                col.Spacing(4);
                col.Item().Text("Key Metrics").Bold();
                col.Item().Table(t =>
                {
                    t.ColumnsDefinition(c =>
                    {
                        c.RelativeColumn(2);
                        c.RelativeColumn(2);
                        c.RelativeColumn(1);
                        c.RelativeColumn(3);
                    });

                    t.Header(h =>
                    {
                        h.Cell().Element(CellHeader).Text("Metric");
                        h.Cell().Element(CellHeader).Text("Value");
                        h.Cell().Element(CellHeader).Text("Source");
                        h.Cell().Element(CellHeader).Text("Details");
                    });

                    foreach (var (metricKey, metric) in set.Metrics.OrderBy(k => k.Key, StringComparer.OrdinalIgnoreCase))
                    {
                        t.Cell().Text(metricKey);

                        string displayValue = "-";
                        if (metric.Value.HasValue)
                        {
                            displayValue = metric.Value.Value.ToString("N2", CultureInfo.InvariantCulture);
                            if (!string.IsNullOrWhiteSpace(metric.Unit))
                                displayValue = string.Concat(displayValue, " ", metric.Unit);
                        }
                        else if (!string.IsNullOrWhiteSpace(metric.Text))
                        {
                            displayValue = metric.Text;
                        }
                        else if (!string.IsNullOrWhiteSpace(metric.Unit))
                        {
                            displayValue = metric.Unit;
                        }

                        t.Cell().Text(displayValue);
                        t.Cell().Text(string.IsNullOrWhiteSpace(metric.Source) ? "-" : metric.Source);

                        string? detailText = metric.Formula;
                        if (!string.IsNullOrWhiteSpace(metric.Notes))
                        {
                            detailText = string.IsNullOrWhiteSpace(detailText)
                                ? metric.Notes
                                : string.Concat(detailText, " | ", metric.Notes);
                        }
                        t.Cell().Text(string.IsNullOrWhiteSpace(detailText) ? "-" : detailText);
                    }
                });
            });
        }

        // Optional AI narratives (env var: ESG_ENABLE_AI_NARRATIVES=true)
        string? aiFlag = Environment.GetEnvironmentVariable("ESG_ENABLE_AI_NARRATIVES");
        bool aiEnabled = string.Equals(aiFlag, "true", StringComparison.OrdinalIgnoreCase);
        string orgName = report.Meta.Organisation.Name ?? string.Empty;
        int year = report.Meta.Period.Year;
        string? envNarr = null, waterNarr = null, wasteNarr = null;
        if (aiEnabled)
        {
            try
            {
                if (report.B3 is { } b3)
                {
                    var top = (b3.ByCarrier ?? new()).OrderByDescending(x => x.Co2eKg).Take(3)
                        .Select(x => $"{x.Carrier}:{x.Co2eKg:N0}kg");
                    var summary = $"S1={b3.Scope1Kg:N0}kg; S2={b3.Scope2Kg:N0}kg; S3={b3.Scope3Kg:N0}kg; Total={b3.TotalKg:N0}kg. Top={string.Join(", ", top)}";
                    envNarr = await _ai.GenerateAsync(new NarrativeRequest(NarrativeSection.Environmental, orgName, year, summary), ct);
                }
                if (report.B6 is { } b6)
                {
                    var s = $"Intake={b6.IntakeM3:N0}m3; Discharge={b6.DischargeM3:N0}m3; Consumption={b6.ConsumptionM3:N0}m3";
                    waterNarr = await _ai.GenerateAsync(new NarrativeRequest(NarrativeSection.Environmental, orgName, year, s), ct);
                }
                if (report.B7 is { } b7)
                {
                    var w = (b7.Waste ?? new()).Sum(x => x.QuantityKg);
                    var m = (b7.Materials ?? new()).Sum(x => x.QuantityTonnes);
                    var s = $"Waste={w:N0}kg; Materials={m:N1}t";
                    wasteNarr = await _ai.GenerateAsync(new NarrativeRequest(NarrativeSection.Environmental, orgName, year, s), ct);
                }
            }
            catch { /* ignore AI failures */ }
        }

        var doc = Document.Create(container =>
        {
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().AlignCenter().Text("ESG Report").SemiBold().FontSize(28);
                page.Content().Column(col =>
                {
                    col.Spacing(8);
                    col.Item().Text($"Company: {report.Meta.Organisation.Name}").FontSize(16);
                    col.Item().Text($"Year: {report.Meta.Period.Year}");
                    col.Item().Text($"Period: {new DateTime(report.Meta.Period.StartDate, TimeOnly.MinValue):yyyy-MM-dd} – {new DateTime(report.Meta.Period.EndDate, TimeOnly.MinValue):yyyy-MM-dd}");
                });
                page.Footer().AlignCenter().Text(x => x.Span("Generated by ESG-as-a-Service").FontColor(Colors.Grey.Medium));
            });

            // B1
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B1 – Company & Basis").SemiBold().FontSize(20);
                var b1 = report.B1;
                if (b1 is null)
                {
                    page.Content().Text(NotProvided("company basis"));
                }
                else
                {
                    page.Content().Column(col =>
                    {
                        col.Spacing(6);
                        col.Item().Table(t =>
                        {
                            t.ColumnsDefinition(c => { c.RelativeColumn(2); c.RelativeColumn(3); });
                            t.Cell().Text("CVR"); t.Cell().Text(b1.Cvr ?? "-");
                            if (b1.ConfidentialityOmissions) { t.Cell().Text("Confidentiality omissions"); t.Cell().Text(b1.OmissionNote ?? "Yes"); }
                        });

                        if (b1.Locations?.Count > 0)
                        {
                            col.Item().Text("Locations").Bold();
                            col.Item().Table(t =>
                            {
                                t.ColumnsDefinition(c => { c.RelativeColumn(2); c.RelativeColumn(1); c.RelativeColumn(1); c.RelativeColumn(2); });
                                t.Header(h =>
                                {
                                    h.Cell().Element(CellHeader).Text("Name");
                                    h.Cell().Element(CellHeader).Text("Lat");
                                    h.Cell().Element(CellHeader).Text("Lon");
                                    h.Cell().Element(CellHeader).Text("Sensitive Area");
                                });
                                foreach (var l in b1.Locations)
                                {
                                    t.Cell().Text(l.Name ?? "-");
                                    t.Cell().Text(l.Latitude?.ToString("F4", CultureInfo.InvariantCulture) ?? "-");
                                    t.Cell().Text(l.Longitude?.ToString("F4", CultureInfo.InvariantCulture) ?? "-");
                                    t.Cell().Text(l.InSensitiveArea ? (string.IsNullOrWhiteSpace(l.Note) ? "Yes" : $"Yes – {l.Note}") : "No");
                                }
                            });
                        }

                        if (b1.Certificates?.Count > 0)
                        {
                            col.Item().PaddingTop(8).Text("Certificates").Bold();
                            col.Item().Table(t =>
                            {
                                t.ColumnsDefinition(c => { c.RelativeColumn(3); c.RelativeColumn(1); c.RelativeColumn(1); });
                                t.Header(h =>
                                {
                                    h.Cell().Element(CellHeader).Text("Standard");
                                    h.Cell().Element(CellHeader).Text("Valid From");
                                    h.Cell().Element(CellHeader).Text("Valid To");
                                });
                                foreach (var c in b1.Certificates)
                                {
                                    t.Cell().Text(c.Standard);
                                    t.Cell().Text(c.ValidFrom?.ToString("yyyy-MM-dd") ?? "-");
                                    t.Cell().Text(c.ValidTo?.ToString("yyyy-MM-dd") ?? "-");
                                }
                            });
                        }
                    });
                }
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B2
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B2 – Policies").SemiBold().FontSize(20);
                var b2 = report.B2;
                if (b2 is null) page.Content().Text(NotProvided("policies"));
                else
                {
                    page.Content().Table(t =>
                    {
                        t.ColumnsDefinition(c => { c.RelativeColumn(3); c.RelativeColumn(1); });
                        t.Header(h => { h.Cell().Element(CellHeader).Text("Policy"); h.Cell().Element(CellHeader).Text("Present"); });
                        void Row(string name, bool present) { t.Cell().Text(name); t.Cell().Text(present ? "Yes" : "No"); }
                        Row("Climate", b2.PolicyClimate);
                        Row("Environment", b2.PolicyEnvironment);
                        Row("Circular Economy", b2.PolicyCircular);
                        Row("Supply Chain", b2.PolicySupplyChain);
                        Row("Anti‑corruption", b2.PolicyAntiCorruption);
                        Row("Data privacy", b2.PolicyDataPrivacy);
                        Row("Whistleblower", b2.PolicyWhistleblower);
                    });
                    if (!string.IsNullOrWhiteSpace(b2.Goal) || !string.IsNullOrWhiteSpace(b2.Status) || !string.IsNullOrWhiteSpace(b2.NextMilestone))
                    {
                        page.Content().PaddingTop(8).Column(c =>
                        {
                            if (!string.IsNullOrWhiteSpace(b2.Goal)) c.Item().Text($"Goal: {b2.Goal}");
                            if (!string.IsNullOrWhiteSpace(b2.Status)) c.Item().Text($"Status: {b2.Status}");
                            if (!string.IsNullOrWhiteSpace(b2.NextMilestone)) c.Item().Text($"Next: {b2.NextMilestone}");
                        });
                    }
                }
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B3
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B3 – Energy & Emissions").SemiBold().FontSize(20);
                page.Content().Column(col =>
                {
                    col.Spacing(6);
                    var b3 = report.B3;
                    if (b3 is null)
                    {
                        col.Item().Text(NotProvided("emissions"));
                        return;
                    }
                    col.Item().Table(t =>
                    {
                        t.ColumnsDefinition(c => { c.RelativeColumn(2); c.RelativeColumn(1); });
                        t.Header(h =>
                        {
                            h.Cell().Element(CellHeader).Text("Scope");
                            h.Cell().Element(CellHeader).AlignRight().Text("kg CO2e");
                        });
                        t.Cell().Text("Scope 1"); t.Cell().AlignRight().Text(b3.Scope1Kg.ToString("N0"));
                        t.Cell().Text("Scope 2"); t.Cell().AlignRight().Text(b3.Scope2Kg.ToString("N0"));
                        t.Cell().Text("Scope 3"); t.Cell().AlignRight().Text(b3.Scope3Kg.ToString("N0"));
                        t.Cell().Text("Total").SemiBold(); t.Cell().AlignRight().Text(b3.TotalKg.ToString("N0"));
                    });

                    if (b3.ByCarrier?.Count > 0)
                    {
                        col.Item().PaddingTop(10).Text("Breakdown by category").Bold();
                        col.Item().Table(t =>
                        {
                            t.ColumnsDefinition(c => { c.RelativeColumn(3); c.RelativeColumn(1); });
                            t.Header(h =>
                            {
                                h.Cell().Element(CellHeader).Text("Category");
                                h.Cell().Element(CellHeader).AlignRight().Text("kg CO2e");
                            });
                            foreach (var row in b3.ByCarrier.OrderByDescending(x => x.Co2eKg))
                            {
                                t.Cell().Text(string.IsNullOrWhiteSpace(row.Carrier) ? "(unspecified)" : row.Carrier);
                                t.Cell().AlignRight().Text(row.Co2eKg.ToString("N0"));
                            }
                        });
                    }
                    if (!string.IsNullOrWhiteSpace(envNarr))
                    {
                        col.Item().PaddingTop(8).Text("Narrative").Bold();
                        col.Item().Text(envNarr);
                    }
                    col.Item().Element(c => AppendMetrics(c, "B3"));
                });
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B4 – Pollution
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B4 – Pollution").SemiBold().FontSize(20);
                var b4 = report.B4;
                if (b4 is null || b4.Count == 0)
                {
                    page.Content().Text(NotProvided("pollution register"));
                }
                else
                {
                    page.Content().Table(t =>
                    {
                        t.ColumnsDefinition(c =>
                        {
                            c.RelativeColumn(3);
                            c.RelativeColumn(1);
                            c.RelativeColumn(1);
                            c.RelativeColumn(2);
                        });
                        t.Header(h =>
                        {
                            h.Cell().Element(CellHeader).Text("Substance");
                            h.Cell().Element(CellHeader).AlignRight().Text("Quantity");
                            h.Cell().Element(CellHeader).Text("Unit");
                            h.Cell().Element(CellHeader).Text("System / Id");
                        });
                        foreach (var item in b4.OrderByDescending(x => x.Quantity))
                        {
                            t.Cell().Text(item.Substance);
                            t.Cell().AlignRight().Text(item.Quantity.ToString("N1", CultureInfo.InvariantCulture));
                            var unit = !string.IsNullOrWhiteSpace(item.UnitCode) ? item.UnitCode : item.UnitId.ToString("N")[..8];
                            t.Cell().Text(unit);
                            var system = string.IsNullOrWhiteSpace(item.ReportingSystem) ? "-" : item.ReportingSystem;
                            var id = string.IsNullOrWhiteSpace(item.ReportingId) ? string.Empty : $" / {item.ReportingId}";
                            t.Cell().Text(system + id);
                        }
                    });
                }
                page.Content().Element(c => AppendMetrics(c, "B4"));
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B5 – Biodiversity
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B5 – Biodiversity").SemiBold().FontSize(20);
                var b5 = report.B5;
                if (b5 is null || b5.Count == 0)
                {
                    page.Content().Text(NotProvided("sensitive areas / locations"));
                }
                else
                {
                    var nameLookup = (report.B1?.Locations ?? new List<B1Location>()).ToDictionary(l => l.Id, l => l.Name);
                    page.Content().Table(t =>
                    {
                        t.ColumnsDefinition(c =>
                        {
                            c.RelativeColumn(3);
                            c.RelativeColumn(1);
                            c.RelativeColumn(3);
                        });
                        t.Header(h =>
                        {
                            h.Cell().Element(CellHeader).Text("Location");
                            h.Cell().Element(CellHeader).Text("Sensitive");
                            h.Cell().Element(CellHeader).Text("Note");
                        });
                        foreach (var item in b5)
                        {
                            var name = nameLookup.TryGetValue(item.Id, out var n) && !string.IsNullOrWhiteSpace(n)
                                ? n
                                : item.Id.ToString();
                            t.Cell().Text(name);
                            t.Cell().Text(item.InSensitiveArea ? "Yes" : "No");
                            t.Cell().Text(string.IsNullOrWhiteSpace(item.SensitiveAreaNote) ? "-" : item.SensitiveAreaNote);
                        }
                    });
                }
                page.Content().Element(c => AppendMetrics(c, "B5"));
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B6
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B6 – Water").SemiBold().FontSize(20);
                var b6 = report.B6;
                if (b6 is null)
                    page.Content().Text(NotProvided("water meters"));
                else
                {
                    page.Content().Table(t =>
                    {
                        t.ColumnsDefinition(c => { c.RelativeColumn(2); c.RelativeColumn(1); });
                        t.Header(h =>
                        {
                            h.Cell().Element(CellHeader).Text("Metric");
                            h.Cell().Element(CellHeader).AlignRight().Text("m³");
                        });
                        t.Cell().Text("Intake"); t.Cell().AlignRight().Text(b6.IntakeM3.ToString("N0"));
                        t.Cell().Text("Discharge"); t.Cell().AlignRight().Text(b6.DischargeM3.ToString("N0"));
                        t.Cell().Text("Consumption").SemiBold(); t.Cell().AlignRight().Text(b6.ConsumptionM3.ToString("N0"));
                    });
                    if (!string.IsNullOrWhiteSpace(waterNarr))
                    {
                        page.Content().PaddingTop(6).Text("Narrative").Bold();
                        page.Content().Text(waterNarr);
                    }
                }
                page.Content().Element(c => AppendMetrics(c, "B6"));
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B7
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B7 – Resources & Waste").SemiBold().FontSize(20);
                var b7 = report.B7;
                if (b7 is null)
                    page.Content().Text(NotProvided("waste/materials"));
                else
                {
                    page.Content().Column(col =>
                    {
                        if (b7.Waste?.Count > 0)
                        {
                            col.Item().Text("Waste (EAK)").Bold();
                            col.Item().Table(t =>
                            {
                                t.ColumnsDefinition(c => { c.RelativeColumn(2); c.RelativeColumn(1); c.RelativeColumn(1); });
                                t.Header(h =>
                                {
                                    h.Cell().Element(CellHeader).Text("EAK code");
                                    h.Cell().Element(CellHeader).Text("Disposition");
                                    h.Cell().Element(CellHeader).AlignRight().Text("kg");
                                });
                                foreach (var w in b7.Waste)
                                {
                                    t.Cell().Text(w.EakCode);
                                    t.Cell().Text(w.Disposition);
                                    t.Cell().AlignRight().Text(w.QuantityKg.ToString("N0"));
                                }
                            });
                        }

                        if (b7.Materials?.Count > 0)
                        {
                            col.Item().PaddingTop(10).Text("Materials").Bold();
                            col.Item().Table(t =>
                            {
                                t.ColumnsDefinition(c => { c.RelativeColumn(3); c.RelativeColumn(1); });
                                t.Header(h =>
                                {
                                    h.Cell().Element(CellHeader).Text("Material");
                                    h.Cell().Element(CellHeader).AlignRight().Text("tonnes");
                                });
                                foreach (var m in b7.Materials)
                                {
                                    t.Cell().Text(m.Material);
                                    t.Cell().AlignRight().Text(m.QuantityTonnes.ToString("N1", CultureInfo.InvariantCulture));
                                }
                            });
                        }
                        if (!string.IsNullOrWhiteSpace(wasteNarr))
                        {
                            col.Item().PaddingTop(6).Text("Narrative").Bold();
                            col.Item().Text(wasteNarr);
                        }
                        col.Item().Element(c => AppendMetrics(c, "B7"));
                    });
                }
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B8 – Workforce
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B8 – Workforce").SemiBold().FontSize(20);
                var b8 = report.B8;
                if (b8 is null) page.Content().Text(NotProvided("workforce"));
                else
                {
                    page.Content().Table(t =>
                    {
                        t.ColumnsDefinition(c => { c.RelativeColumn(3); c.RelativeColumn(1); });
                        t.Header(h => { h.Cell().Element(CellHeader).Text("Metric"); h.Cell().Element(CellHeader).AlignRight().Text("Value"); });
                        t.Cell().Text("FTE total"); t.Cell().AlignRight().Text(b8.FteTotal.ToString("N1", CultureInfo.InvariantCulture));
                        if (b8.TurnoverRate.HasValue) { t.Cell().Text("Turnover rate"); t.Cell().AlignRight().Text(b8.TurnoverRate.Value.ToString("P1", CultureInfo.InvariantCulture)); }
                    });
                }
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B9 – Health & Safety
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B9 – Health & Safety").SemiBold().FontSize(20);
                var b9 = report.B9;
                if (b9 is null) page.Content().Text(NotProvided("incidents/hours"));
                else
                {
                    page.Content().Table(t =>
                    {
                        t.ColumnsDefinition(c => { c.RelativeColumn(3); c.RelativeColumn(1); });
                        t.Header(h => { h.Cell().Element(CellHeader).Text("Metric"); h.Cell().Element(CellHeader).AlignRight().Text("Value"); });
                        t.Cell().Text("Incidents count"); t.Cell().AlignRight().Text(b9.IncidentsCount.ToString("N0"));
                        t.Cell().Text("Hours worked"); t.Cell().AlignRight().Text(b9.HoursWorked.ToString("N0"));
                        t.Cell().Text("AFR (per 200k hours)"); t.Cell().AlignRight().Text(b9.AccidentFrequency?.ToString("N2", CultureInfo.InvariantCulture) ?? "-");
                    });
                }
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B10 – Pay & Training
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B10 – Pay & Training").SemiBold().FontSize(20);
                var b10 = report.B10;
                if (b10 is null) page.Content().Text(NotProvided("pay/training"));
                else
                {
                    page.Content().Table(t =>
                    {
                        t.ColumnsDefinition(c => { c.RelativeColumn(3); c.RelativeColumn(1); });
                        t.Header(h => { h.Cell().Element(CellHeader).Text("Metric"); h.Cell().Element(CellHeader).AlignRight().Text("Value"); });
                        t.Cell().Text("Gender pay gap"); t.Cell().AlignRight().Text(b10.GenderPayGap?.ToString("P1", CultureInfo.InvariantCulture) ?? "-");
                        t.Cell().Text("Collective agreement coverage"); t.Cell().AlignRight().Text(b10.CoveragePct?.ToString("P0", CultureInfo.InvariantCulture) ?? "-");
                        t.Cell().Text("Training hours per employee"); t.Cell().AlignRight().Text(b10.TrainingHoursPerEmployee?.ToString("N1", CultureInfo.InvariantCulture) ?? "-");
                    });
                    page.Content().Element(c => AppendMetrics(c, "B10"));
                }
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // B11 – Business Conduct
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("B11 – Business Conduct").SemiBold().FontSize(20);
                if (report.B11 is null || report.B11.Count == 0)
                {
                    page.Content().Text(NotProvided("governance cases"));
                }
                else
                {
                    page.Content().Table(t =>
                    {
                        t.ColumnsDefinition(c => { c.RelativeColumn(2); c.RelativeColumn(2); c.RelativeColumn(1); c.RelativeColumn(2); });
                        t.Header(h =>
                        {
                            h.Cell().Element(CellHeader).Text("Type");
                            h.Cell().Element(CellHeader).Text("Outcome");
                            h.Cell().Element(CellHeader).AlignRight().Text("Amount");
                            h.Cell().Element(CellHeader).Text("Ref");
                        });
                        foreach (var gc in report.B11)
                        {
                            t.Cell().Text(gc.Type);
                            t.Cell().Text(gc.Outcome ?? "-");
                            t.Cell().AlignRight().Text(gc.Amount?.ToString("N0", CultureInfo.InvariantCulture) ?? "-");
                            t.Cell().Text(gc.CaseRef ?? "-");
                        }
                    });
                }
                page.Content().Element(c => AppendMetrics(c, "B11"));
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // C1 – Strategy & Targets
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("C1 – Strategy & Targets").SemiBold().FontSize(20);
                var c1 = report.C1;
                if (c1 is null)
                {
                    page.Content().Text(NotProvided("targets & progress"));
                }
                else
                {
                    page.Content().Column(col =>
                    {
                        col.Spacing(6);
                        if (!string.IsNullOrWhiteSpace(c1.Summary)) col.Item().Text(c1.Summary);
                        if (!string.IsNullOrWhiteSpace(c1.ShortTermTarget)) col.Item().Text($"Short-term: {c1.ShortTermTarget}");
                        if (!string.IsNullOrWhiteSpace(c1.LongTermTarget)) col.Item().Text($"Long-term: {c1.LongTermTarget}");
                        if (c1.EmissionReductionTargetPct.HasValue)
                            col.Item().Text($"Emission reduction target: {c1.EmissionReductionTargetPct.Value.ToString("P1", CultureInfo.InvariantCulture)}");
                        if (c1.TargetYear.HasValue) col.Item().Text($"Target year: {c1.TargetYear.Value}");
                        if (!string.IsNullOrWhiteSpace(c1.InvestmentPlan)) col.Item().Text($"Investment plan: {c1.InvestmentPlan}");
                        if (!string.IsNullOrWhiteSpace(c1.Progress)) col.Item().Text($"Progress: {c1.Progress}");
                        col.Item().Element(c => AppendMetrics(c, "C1"));
                    });
                }
                if (c1 is null)
                    page.Content().Element(c => AppendMetrics(c, "C1"));
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // C2 – Risks
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("C2 – Risks").SemiBold().FontSize(20);
                var c2 = report.C2;
                if (c2 is null)
                {
                    page.Content().Text(NotProvided("risk assessment"));
                }
                else
                {
                    page.Content().Column(col =>
                    {
                        col.Spacing(6);
                        if (!string.IsNullOrWhiteSpace(c2.Process)) col.Item().Text($"Process: {c2.Process}");
                        if (!string.IsNullOrWhiteSpace(c2.ClimateRisks)) col.Item().Text($"Climate risks: {c2.ClimateRisks}");
                        if (!string.IsNullOrWhiteSpace(c2.Opportunities)) col.Item().Text($"Opportunities: {c2.Opportunities}");
                        if (!string.IsNullOrWhiteSpace(c2.TimeHorizon)) col.Item().Text($"Time horizon: {c2.TimeHorizon}");
                        if (!string.IsNullOrWhiteSpace(c2.Mitigations)) col.Item().Text($"Mitigations: {c2.Mitigations}");
                        col.Item().Element(c => AppendMetrics(c, "C2"));
                    });
                }
                if (c2 is null)
                    page.Content().Element(c => AppendMetrics(c, "C2"));
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // C3 – Human Rights
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("C3 – Human Rights").SemiBold().FontSize(20);
                var c3 = report.C3;
                if (c3 is null)
                {
                    page.Content().Text(NotProvided("policy & due diligence"));
                }
                else
                {
                    page.Content().Column(col =>
                    {
                        col.Spacing(6);
                        col.Item().Text($"Policy exists: {(c3.PolicyExists ? "Yes" : "No")}");
                        col.Item().Text($"Due diligence: {(c3.DueDiligenceInPlace ? "Yes" : "No")}");
                        if (!string.IsNullOrWhiteSpace(c3.HighRiskAreas)) col.Item().Text($"High-risk areas: {c3.HighRiskAreas}");
                        if (!string.IsNullOrWhiteSpace(c3.Remediation)) col.Item().Text($"Remediation: {c3.Remediation}");
                        if (!string.IsNullOrWhiteSpace(c3.TrainingProvided)) col.Item().Text($"Training: {c3.TrainingProvided}");
                        col.Item().Element(c => AppendMetrics(c, "C3"));
                    });
                }
                if (c3 is null)
                    page.Content().Element(c => AppendMetrics(c, "C3"));
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // C4 – Governance
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("C4 – Governance").SemiBold().FontSize(20);
                var c4 = report.C4;
                if (c4 is null)
                {
                    page.Content().Text(NotProvided("roles & oversight"));
                }
                else
                {
                    page.Content().Column(col =>
                    {
                        col.Spacing(6);
                        if (!string.IsNullOrWhiteSpace(c4.BoardOversight)) col.Item().Text($"Board oversight: {c4.BoardOversight}");
                        if (!string.IsNullOrWhiteSpace(c4.ManagementResponsibilities)) col.Item().Text($"Management responsibilities: {c4.ManagementResponsibilities}");
                        if (!string.IsNullOrWhiteSpace(c4.Incentives)) col.Item().Text($"Incentives: {c4.Incentives}");
                        if (c4.ClimateExpertOnBoard.HasValue)
                            col.Item().Text($"Climate expert on board: {(c4.ClimateExpertOnBoard.Value ? "Yes" : "No")}");
                        col.Item().Element(c => AppendMetrics(c, "C4"));
                    });
                }
                if (c4 is null)
                    page.Content().Element(c => AppendMetrics(c, "C4"));
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // C5 – Board Diversity
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("C5 – Board Diversity").SemiBold().FontSize(20);
                var c5 = report.C5;
                if (c5 is null)
                {
                    page.Content().Text(NotProvided("composition"));
                }
                else
                {
                    page.Content().Table(t =>
                    {
                        t.ColumnsDefinition(c => { c.RelativeColumn(3); c.RelativeColumn(1); });
                        t.Header(h => { h.Cell().Element(CellHeader).Text("Metric"); h.Cell().Element(CellHeader).AlignRight().Text("Value"); });
                        t.Cell().Text("% Female"); t.Cell().AlignRight().Text(c5.PercentFemale?.ToString("P1", CultureInfo.InvariantCulture) ?? "-");
                        t.Cell().Text("% Male"); t.Cell().AlignRight().Text(c5.PercentMale?.ToString("P1", CultureInfo.InvariantCulture) ?? "-");
                        t.Cell().Text("% Other"); t.Cell().AlignRight().Text(c5.PercentOther?.ToString("P1", CultureInfo.InvariantCulture) ?? "-");
                        t.Cell().Text("% Independent"); t.Cell().AlignRight().Text(c5.PercentIndependent?.ToString("P1", CultureInfo.InvariantCulture) ?? "-");
                    });
                    if (!string.IsNullOrWhiteSpace(c5.DiversityPolicy) || !string.IsNullOrWhiteSpace(c5.SelectionProcess))
                    {
                        page.Content().PaddingTop(6).Column(col =>
                        {
                            if (!string.IsNullOrWhiteSpace(c5.DiversityPolicy)) col.Item().Text($"Policy: {c5.DiversityPolicy}");
                            if (!string.IsNullOrWhiteSpace(c5.SelectionProcess)) col.Item().Text($"Selection: {c5.SelectionProcess}");
                        });
                    }
                    page.Content().Element(c => AppendMetrics(c, "C5"));
                }
                if (c5 is null)
                    page.Content().Element(c => AppendMetrics(c, "C5"));
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // C6 – Stakeholders
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("C6 – Stakeholders").SemiBold().FontSize(20);
                var c6 = report.C6;
                if (c6 is null)
                {
                    page.Content().Text(NotProvided("engagement"));
                }
                else
                {
                    page.Content().Column(col =>
                    {
                        col.Spacing(6);
                        if (!string.IsNullOrWhiteSpace(c6.StakeholderGroups)) col.Item().Text($"Groups: {c6.StakeholderGroups}");
                        if (!string.IsNullOrWhiteSpace(c6.EngagementProcess)) col.Item().Text($"Process: {c6.EngagementProcess}");
                        if (!string.IsNullOrWhiteSpace(c6.KeyTopics)) col.Item().Text($"Key topics: {c6.KeyTopics}");
                        if (c6.WorkerRepresentation.HasValue)
                            col.Item().Text($"Worker representation: {(c6.WorkerRepresentation.Value ? "Yes" : "No")}");
                        col.Item().Element(c => AppendMetrics(c, "C6"));
                    });
                }
                if (c6 is null)
                    page.Content().Element(c => AppendMetrics(c, "C6"));
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // C7 – Value Chain
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("C7 – Value Chain").SemiBold().FontSize(20);
                var c7 = report.C7;
                if (c7 is null)
                {
                    page.Content().Text(NotProvided("scope 3 coverage"));
                }
                else
                {
                    page.Content().Column(col =>
                    {
                        col.Spacing(6);
                        if (!string.IsNullOrWhiteSpace(c7.UpstreamCoverage)) col.Item().Text($"Upstream: {c7.UpstreamCoverage}");
                        if (!string.IsNullOrWhiteSpace(c7.DownstreamCoverage)) col.Item().Text($"Downstream: {c7.DownstreamCoverage}");
                        if (!string.IsNullOrWhiteSpace(c7.Scope3Categories)) col.Item().Text($"Scope 3 categories: {c7.Scope3Categories}");
                        if (!string.IsNullOrWhiteSpace(c7.DataGaps)) col.Item().Text($"Data gaps: {c7.DataGaps}");
                        col.Item().Element(c => AppendMetrics(c, "C7"));
                    });
                }
                if (c7 is null)
                    page.Content().Element(c => AppendMetrics(c, "C7"));
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // C8 – Assurance
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("C8 – Assurance").SemiBold().FontSize(20);
                var c8 = report.C8;
                if (c8 is null)
                {
                    page.Content().Text(NotProvided("external/internal"));
                }
                else
                {
                    page.Content().Column(col =>
                    {
                        col.Spacing(6);
                        if (!string.IsNullOrWhiteSpace(c8.Provider)) col.Item().Text($"Provider: {c8.Provider}");
                        if (!string.IsNullOrWhiteSpace(c8.AssuranceLevel)) col.Item().Text($"Level: {c8.AssuranceLevel}");
                        if (!string.IsNullOrWhiteSpace(c8.Scope)) col.Item().Text($"Scope: {c8.Scope}");
                        if (c8.AssuranceDate.HasValue) col.Item().Text($"Date: {c8.AssuranceDate.Value:yyyy-MM-dd}");
                        if (!string.IsNullOrWhiteSpace(c8.Summary)) col.Item().Text($"Summary: {c8.Summary}");
                        if (c8.IsIndependent.HasValue) col.Item().Text($"Independent: {(c8.IsIndependent.Value ? "Yes" : "No")}");
                        col.Item().Element(c => AppendMetrics(c, "C8"));
                    });
                }
                if (c8 is null)
                    page.Content().Element(c => AppendMetrics(c, "C8"));
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });

            // C9 – Methodology
            container.Page(page =>
            {
                page.Margin(40);
                page.Header().Text("C9 – Methodology").SemiBold().FontSize(20);
                var c9 = report.C9;
                if (c9 is null)
                {
                    page.Content().Text(NotProvided("boundaries, EF sources"));
                }
                else
                {
                    page.Content().Column(col =>
                    {
                        col.Spacing(6);
                        if (!string.IsNullOrWhiteSpace(c9.ReportingBoundary)) col.Item().Text($"Boundary: {c9.ReportingBoundary}");
                        if (!string.IsNullOrWhiteSpace(c9.ConsolidationApproach)) col.Item().Text($"Consolidation approach: {c9.ConsolidationApproach}");
                        if (!string.IsNullOrWhiteSpace(c9.EmissionFactorSources)) col.Item().Text($"Emission factor sources: {c9.EmissionFactorSources}");
                        if (!string.IsNullOrWhiteSpace(c9.EstimationApproach)) col.Item().Text($"Estimation approach: {c9.EstimationApproach}");
                        if (!string.IsNullOrWhiteSpace(c9.MaterialityThreshold)) col.Item().Text($"Materiality threshold: {c9.MaterialityThreshold}");
                        col.Item().Element(c => AppendMetrics(c, "C9"));
                    });
                }
                if (c9 is null)
                    page.Content().Element(c => AppendMetrics(c, "C9"));
                page.Footer().AlignCenter().Text(t => { t.Span("Page "); t.CurrentPageNumber(); t.Span(" of "); t.TotalPages(); });
            });
        });

        return doc.GeneratePdf();
    }
    public async Task<byte[]> GenerateXbrlAsync(Company company, ReportingPeriod period, CancellationToken ct = default)
    {
        ArgumentNullException.ThrowIfNull(company);
        ArgumentNullException.ThrowIfNull(period);

        // Minimal XBRL instance document. In production, reference the official EFRAG VSME taxonomy.
        var settings = new XmlWriterSettings
        {
            Encoding = new UTF8Encoding(false),
            Indent = true,
            Async = true
        };

        using var ms = new MemoryStream();
        await using var xw = XmlWriter.Create(ms, settings);
        var entityId = company.OrganizationNumber ?? company.Id.ToString();
        var contextId = $"ctx-{period.Year}";

        await xw.WriteStartDocumentAsync();
        await xw.WriteStartElementAsync("xbrli", "xbrl", "http://www.xbrl.org/2003/instance");
        await xw.WriteAttributeStringAsync("xmlns", "xbrli", null, "http://www.xbrl.org/2003/instance");
        await xw.WriteAttributeStringAsync("xmlns", "esg", null, "https://example.com/taxonomy/esg");

        // Context
        await xw.WriteStartElementAsync("xbrli", "context", null);
        await xw.WriteAttributeStringAsync(null, "id", null, contextId);
        await xw.WriteStartElementAsync("xbrli", "entity", null);
        await xw.WriteStartElementAsync("xbrli", "identifier", null);
        await xw.WriteAttributeStringAsync(null, "scheme", null, "http://example.com/orgid");
        await xw.WriteStringAsync(entityId);
        await xw.WriteEndElementAsync(); // identifier
        await xw.WriteEndElementAsync(); // entity
        await xw.WriteStartElementAsync("xbrli", "period", null);
        await xw.WriteElementStringAsync("xbrli", "startDate", null, new DateTime(period.StartDate, TimeOnly.MinValue).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
        await xw.WriteElementStringAsync("xbrli", "endDate", null, new DateTime(period.EndDate, TimeOnly.MinValue).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
        await xw.WriteEndElementAsync(); // period
        await xw.WriteEndElementAsync(); // context

        // Units
        await xw.WriteStartElementAsync("xbrli", "unit", null);
        await xw.WriteAttributeStringAsync(null, "id", null, "kg");
        await xw.WriteStartElementAsync("xbrli", "measure", null);
        await xw.WriteStringAsync("esg:kilogramCO2e");
        await xw.WriteEndElementAsync();
        await xw.WriteEndElementAsync();

        // Facts (example)
        double scope1 = period.EnvironmentalActivities.Where(a => a.Scope == EmissionScope.Scope1).Sum(a => a.CO2eKg);
        double scope2 = period.EnvironmentalActivities.Where(a => a.Scope == EmissionScope.Scope2).Sum(a => a.CO2eKg);
        double scope3 = period.EnvironmentalActivities.Where(a => a.Scope == EmissionScope.Scope3).Sum(a => a.CO2eKg);

        async Task WriteFactAsync(string name, double value)
        {
            await xw.WriteStartElementAsync("esg", name, null);
            await xw.WriteAttributeStringAsync(null, "contextRef", null, contextId);
            await xw.WriteAttributeStringAsync(null, "unitRef", null, "kg");
            await xw.WriteStringAsync(Math.Round(value, 3).ToString(CultureInfo.InvariantCulture));
            await xw.WriteEndElementAsync();
        }

        await WriteFactAsync("Scope1Emissions", scope1);
        await WriteFactAsync("Scope2Emissions", scope2);
        await WriteFactAsync("Scope3Emissions", scope3);

        // Close root element and flush
        await xw.WriteEndElementAsync(); // xbrl
        await xw.FlushAsync();
    return ms.ToArray();
}
}
